/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.datawhisperers.jsonexample;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Car2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8321310806754906763L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Car2\",\"namespace\":\"com.datawhisperers.jsonexample\",\"fields\":[{\"name\":\"cost\",\"type\":[\"null\",{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}]},{\"name\":\"make\",\"type\":[\"null\",\"string\"]},{\"name\":\"model\",\"type\":[\"null\",\"string\"]},{\"name\":\"raw\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Car2> ENCODER =
      new BinaryMessageEncoder<Car2>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Car2> DECODER =
      new BinaryMessageDecoder<Car2>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Car2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Car2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Car2>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Car2 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Car2 from a ByteBuffer. */
  public static Car2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.math.BigDecimal cost;
  @Deprecated public java.lang.CharSequence make;
  @Deprecated public java.lang.CharSequence model;
  @Deprecated public java.lang.CharSequence raw;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Car2() {}

  /**
   * All-args constructor.
   * @param cost The new value for cost
   * @param make The new value for make
   * @param model The new value for model
   * @param raw The new value for raw
   */
  public Car2(java.math.BigDecimal cost, java.lang.CharSequence make, java.lang.CharSequence model, java.lang.CharSequence raw) {
    this.cost = cost;
    this.make = make;
    this.model = model;
    this.raw = raw;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cost;
    case 1: return make;
    case 2: return model;
    case 3: return raw;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cost = (java.math.BigDecimal)value$; break;
    case 1: make = (java.lang.CharSequence)value$; break;
    case 2: model = (java.lang.CharSequence)value$; break;
    case 3: raw = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cost' field.
   * @return The value of the 'cost' field.
   */
  public java.math.BigDecimal getCost() {
    return cost;
  }

  /**
   * Sets the value of the 'cost' field.
   * @param value the value to set.
   */
  public void setCost(java.math.BigDecimal value) {
    this.cost = value;
  }

  /**
   * Gets the value of the 'make' field.
   * @return The value of the 'make' field.
   */
  public java.lang.CharSequence getMake() {
    return make;
  }

  /**
   * Sets the value of the 'make' field.
   * @param value the value to set.
   */
  public void setMake(java.lang.CharSequence value) {
    this.make = value;
  }

  /**
   * Gets the value of the 'model' field.
   * @return The value of the 'model' field.
   */
  public java.lang.CharSequence getModel() {
    return model;
  }

  /**
   * Sets the value of the 'model' field.
   * @param value the value to set.
   */
  public void setModel(java.lang.CharSequence value) {
    this.model = value;
  }

  /**
   * Gets the value of the 'raw' field.
   * @return The value of the 'raw' field.
   */
  public java.lang.CharSequence getRaw() {
    return raw;
  }

  /**
   * Sets the value of the 'raw' field.
   * @param value the value to set.
   */
  public void setRaw(java.lang.CharSequence value) {
    this.raw = value;
  }

  /**
   * Creates a new Car2 RecordBuilder.
   * @return A new Car2 RecordBuilder
   */
  public static com.datawhisperers.jsonexample.Car2.Builder newBuilder() {
    return new com.datawhisperers.jsonexample.Car2.Builder();
  }

  /**
   * Creates a new Car2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Car2 RecordBuilder
   */
  public static com.datawhisperers.jsonexample.Car2.Builder newBuilder(com.datawhisperers.jsonexample.Car2.Builder other) {
    return new com.datawhisperers.jsonexample.Car2.Builder(other);
  }

  /**
   * Creates a new Car2 RecordBuilder by copying an existing Car2 instance.
   * @param other The existing instance to copy.
   * @return A new Car2 RecordBuilder
   */
  public static com.datawhisperers.jsonexample.Car2.Builder newBuilder(com.datawhisperers.jsonexample.Car2 other) {
    return new com.datawhisperers.jsonexample.Car2.Builder(other);
  }

  /**
   * RecordBuilder for Car2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Car2>
    implements org.apache.avro.data.RecordBuilder<Car2> {

    private java.math.BigDecimal cost;
    private java.lang.CharSequence make;
    private java.lang.CharSequence model;
    private java.lang.CharSequence raw;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.datawhisperers.jsonexample.Car2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cost)) {
        this.cost = data().deepCopy(fields()[0].schema(), other.cost);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.make)) {
        this.make = data().deepCopy(fields()[1].schema(), other.make);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.model)) {
        this.model = data().deepCopy(fields()[2].schema(), other.model);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.raw)) {
        this.raw = data().deepCopy(fields()[3].schema(), other.raw);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Car2 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.datawhisperers.jsonexample.Car2 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.cost)) {
        this.cost = data().deepCopy(fields()[0].schema(), other.cost);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.make)) {
        this.make = data().deepCopy(fields()[1].schema(), other.make);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.model)) {
        this.model = data().deepCopy(fields()[2].schema(), other.model);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.raw)) {
        this.raw = data().deepCopy(fields()[3].schema(), other.raw);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'cost' field.
      * @return The value.
      */
    public java.math.BigDecimal getCost() {
      return cost;
    }

    /**
      * Sets the value of the 'cost' field.
      * @param value The value of 'cost'.
      * @return This builder.
      */
    public com.datawhisperers.jsonexample.Car2.Builder setCost(java.math.BigDecimal value) {
      validate(fields()[0], value);
      this.cost = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cost' field has been set.
      * @return True if the 'cost' field has been set, false otherwise.
      */
    public boolean hasCost() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cost' field.
      * @return This builder.
      */
    public com.datawhisperers.jsonexample.Car2.Builder clearCost() {
      cost = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'make' field.
      * @return The value.
      */
    public java.lang.CharSequence getMake() {
      return make;
    }

    /**
      * Sets the value of the 'make' field.
      * @param value The value of 'make'.
      * @return This builder.
      */
    public com.datawhisperers.jsonexample.Car2.Builder setMake(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.make = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'make' field has been set.
      * @return True if the 'make' field has been set, false otherwise.
      */
    public boolean hasMake() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'make' field.
      * @return This builder.
      */
    public com.datawhisperers.jsonexample.Car2.Builder clearMake() {
      make = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'model' field.
      * @return The value.
      */
    public java.lang.CharSequence getModel() {
      return model;
    }

    /**
      * Sets the value of the 'model' field.
      * @param value The value of 'model'.
      * @return This builder.
      */
    public com.datawhisperers.jsonexample.Car2.Builder setModel(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.model = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'model' field has been set.
      * @return True if the 'model' field has been set, false otherwise.
      */
    public boolean hasModel() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'model' field.
      * @return This builder.
      */
    public com.datawhisperers.jsonexample.Car2.Builder clearModel() {
      model = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'raw' field.
      * @return The value.
      */
    public java.lang.CharSequence getRaw() {
      return raw;
    }

    /**
      * Sets the value of the 'raw' field.
      * @param value The value of 'raw'.
      * @return This builder.
      */
    public com.datawhisperers.jsonexample.Car2.Builder setRaw(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.raw = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'raw' field has been set.
      * @return True if the 'raw' field has been set, false otherwise.
      */
    public boolean hasRaw() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'raw' field.
      * @return This builder.
      */
    public com.datawhisperers.jsonexample.Car2.Builder clearRaw() {
      raw = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Car2 build() {
      try {
        Car2 record = new Car2();
        record.cost = fieldSetFlags()[0] ? this.cost : (java.math.BigDecimal) defaultValue(fields()[0]);
        record.make = fieldSetFlags()[1] ? this.make : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.model = fieldSetFlags()[2] ? this.model : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.raw = fieldSetFlags()[3] ? this.raw : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Car2>
    WRITER$ = (org.apache.avro.io.DatumWriter<Car2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Car2>
    READER$ = (org.apache.avro.io.DatumReader<Car2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
